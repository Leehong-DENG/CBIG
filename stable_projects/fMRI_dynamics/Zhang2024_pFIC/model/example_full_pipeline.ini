[system]
# warm up period (in frames)
warmup = 5000
# pre-simulation period (in minutes)
t_pre = 2.4
# sliding window length, usually equals to 60s/TR
window_size = 83
# simulation period (in minutes)
simulation_period = 14.4
# Euler integration time step size for training (in seconds)
# For proper downsampling, note that TR divided by the time step size must be an integer
dt_training = 0.006
# Euler integration time step size for validation (in seconds)
dt_validation = 0.0005
# Euler integration time step size for testing (in seconds)
dt_test = 0.0005
# Euler integration time step size for extrapolation, where applicable (in seconds)
dt_extrapolation = 0.0005
# minimum/maximum excitatory firing rate (Hz)
rE_min = 2.7
rE_max = 3.3
# GPU index, put -1 if you don't want to specify a GPU index (for example, running on a cluster)
GPU_index = 0
# number of multiprocessing process
num_thread = 5
# random seed
random_seed = [1, 4, 8, 10, 13]

[BOLD]
# TR of BOLD signals (s)
TR = 0.72
# number of BOLD frames
n_frame = 1200

[hemodynamic]
# Balloon-Windkessel hemodynamic model parameters
p_constant = 0.34
v_0 = 0.02
beta = 0.65
gamma = 0.41
tau = 0.98
alpha = 0.33

[neuralMassModel]
# effective external current
I0 = 0.382
# kinetic parameter
gamma = 0.641

[excitatory]
# steady-state excitatory current (nA)
I_E_ss = 0.3772259651
# steady-state excitatory synaptic gating variable
S_E_ss = 0.1641205151
# excitatory scaling factor for effective external input
W_E = 1.
# excitatory synaptic coupling (nA)
J_NMDA = 0.15
# excitatory firing rate parameters
a_E = 310.
b_E = 125.
d_E = 0.16
# excitatory time constant (s)
tau_E = 0.1

[inhibitory]
# steady-state inhibitory current (nA)
I_I_ss = 0.296385800197336
# steady-state excitatory synaptic gating variable
S_I_ss = 0.1433408985
# inhibitory firing rate parameters
a_I = 615.
b_I = 177.
d_I = 0.087
# inhibitory time constant (s)
tau_I = 0.01
# inhibitory scaling factor for effective external input
W_I = 0.7

[training]
output_path = ../replication/HCP/training/
output_file = training
FCD_training = ../replication/HCP/input/FCD_train.mat
FC_training = ../replication/HCP/input/FC_train.csv
SC_training = ../replication/HCP/input/SC_train.csv
myelin_training = ../replication/HCP/input/myelin.csv
RSFC_gradient_training = ../replication/HCP/input/rsfc_gradient.csv
# weights for cost function terms
FC_corr_weight = 1
FC_L1_weight = 1
FCD_KS_weight = 1
# number of training epochs
num_epoch = 100
# spatial constraint
spatial_constraint = 0
# set wEI and wEE search range
wEI_a = 11
wEI_b = 0
wEI_c = 22
wEI_d = -6
wEE_a = 20
wEE_b = 0
wEE_c = 20
wEE_d = -3
# low-memory mode? (1 = yes, 0 = no)
low_mem = 0

[validation]
output_path = ../replication/HCP/validation/
output_file = validation
FCD_validation = ../replication/HCP/input/FCD_validation.mat
FC_validation = ../replication/HCP/input/FC_validation.csv
SC_validation = ../replication/HCP/input/SC_validation.csv
# low-memory mode? (1 = yes, 0 = no)
low_mem = 1

[test]
output_path = ../replication/HCP/test/
FCD_test = ../replication/HCP/input/FCD_test.mat
FC_test = ../replication/HCP/input/FC_test.csv
SC_test = ../replication/HCP/input/SC_test.csv
# number of repeated forward simulations, must be an integer multiple of n_ave
n_dup = 1000
# number of repetition for averaging
n_ave = 10
# number of solution
n_solution = 10
# similarity constraint (this is to prevent multiple solutions from being too similar in terms of correlation)
# in this case, solutions with a correlation of 0.98 or above with any of the previous solutions are considered as being too similar
similarity_threshold = 0.98

